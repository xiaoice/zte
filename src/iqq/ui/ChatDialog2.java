
package iqq.ui;

import iqq.comm.Auth;
import iqq.comm.CloseTabIcon;
import iqq.model.Group;
import iqq.model.Member;
import iqq.model.Message;
import iqq.service.StackMessageService;
import iqq.util.ChatHistoryUtils;
import iqq.util.ErrorMessage;
import iqq.util.Log;
import iqq.util.QQEnvironment;
import iqq.util.ThreadUtil;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.WindowConstants;

public class ChatDialog2 extends javax.swing.JFrame {

    private HashMap tabMaps = new HashMap();
    private RandomAccessFile chatHistory;
    private String uid;
    public HashMap getTabMaps() {
        return tabMaps;
    }

    public void setTabMaps(HashMap tabMaps) {
        this.tabMaps = tabMaps;
    }

    /**
     * Creates new form ChatDialog
     */
    public ChatDialog2(java.awt.Frame parent, String uid) {
        //super(parent, modal);
        initComponents();
        this.uid = uid;
        this.setIconImage(Auth.getMember().getFace().getImage());
        try {
            //this.setContentPane(new ChatPanel());
            chatHistory = new RandomAccessFile(QQEnvironment.getChatHistroyDir()+ uid,"rw");
        } catch (FileNotFoundException ex) {
            
        }
        
        this.validate();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(350, 160, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        ChatPanel  cp =(ChatPanel) getContentPane();
        
        JTextPane jp = cp.getChatingTextPane();
        
        String chatStr  = jp.getText();
        
        //ChatHistoryUtils.appendToEnd(chatHistory, chatStr);
        ChatHistoryUtils.appendToEnd(uid, chatStr);
        try {
            chatHistory.close();
        } catch (IOException ex) {
            Logger.getLogger(ChatDialog2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    
    public void addChat(Message msg) throws Exception {
        Member member = msg.getMember();
        Group group = msg.getGroup();
        
        BaseChatPanel p = null;
        String title = "";
        if(member != null) {
            p =new ChatPanel(member); 
            title = member.getNickname();
        } else if(group != null ) {
           p = new GroupChatPanel(group);
           title = group.getName();
        }else {
            return ;
        }
        
        final Icon icon = new CloseTabIcon(this.getClass().getClassLoader().getResource("iqq/res/images/icon/close.png"));
        
        this.initPanel(title, icon, p, msg);
        
        //ChatHistoryUtils.appendToEnd(chatHistory, msg+"\n");
        
        /*
        tabChat.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int tabNumber = tabChat.getUI().tabForCoordinate(tabChat, e.getX(), e.getY());
                if (tabNumber < 0) {
                    return;
                }
                //Log.println("tabNumber: " + tabNumber);
                Rectangle rect = ((CloseTabIcon) tabChat.getIconAt(tabNumber)).getBounds();
                if (rect.contains(e.getX(), e.getY())) {
                    //the tab is being closed  
                    removeTabAt(tabNumber);
                    if(tabChat.getTabCount() == 0) {
                        dispose();
                    }
                }
            }
        });
        * */
    }

   private void initPanel(String title, Icon icon, BaseChatPanel component, Message msg) {
        Member member = null;
        Group group = null;
        long id = -2;
        if(msg.getMember() != null) {
            member = msg.getMember();
            id = member.getUin();
        } else if(msg.getGroup() != null){
            group = msg.getGroup();
            id = group.getId();
        }else{
            return ;
        }
        
        if(msg != null) {
            //component.setChatHistory(chatHistory);
            component.setMessages(msg);
           // component.appendChatHistory(msg);
        }
        //tabMaps.put(key, component);
        //tabChat.addTab(title, icon, component);
        this.setContentPane(component);
        
        this.validate();
        this.setVisible(true);  

    }              

}
